# Vagrant.require_version "> 1.1"
Vagrant.configure("2") do |config|
  # config.vm.boot_timeout = Defaults '600'
  # config.vm.boot_timeout = '600'
  # config.vm.box = This configures what box the machine will be brought up against.
  #   The value here should be the name of an installed box or a shorthand name of a
  #   box in HashiCorp's Atlas.
  # config.vm.box = 'Forgen_test_machine'
  config.vm.box = '<%= @options[:basebox_name] -%>'
  # config.vm.box = '<%= @options[:project_dir] -%>'
  # config.vm.box_check_update = false
  # config.vm.box_download_insecure = false
  # config.vm.box_download_location_trusted = false
  config.vm.box_url = '<%= @options[:basebox_url] %>'
  # config.vm.box_url = file://#{Path to local basebox file}
  ### config.vm.box_url = 'file:///home/user/Desktop/Baseboxes/Windows_2008_metasploitable/windows_2008_server_metasploitable.box'
  # config.vm.box_url = 'file:///media/sf_Baseboxes/Windows_10_32_bit/Build/package.box'
  # config.vm.box_url = http://atlas.hashicorp.com/#{Account name}/boxes/#{Basebox name}/versions/#{Version number}/providers/virtualbox.box
  # config.vm.box_version = #{Version number, defaults to latest}
  # config.vm.communicator = 'Default ssh' / 'winrm' for windows guests
  config.vm.communicator = 'winrm'
  config.vm.boot_timeout = 600
  config.vm.graceful_halt_timeout = 600
  # config.vm.graceful_halt_timeout = Default '60' seconds
  # config.vm.guest = Defaults to ':linux' / windows ':windows'
  config.vm.guest = :windows
  # config.vm.hostname = Defaults to 'nil' so vagrant  / String changes machine hostname
  # config.vm.network = TODO: networking configuration
  config.vm.network :forwarded_port, guest: 3389, host: 3389
  config.vm.network :forwarded_port, guest: 5985, host: 5985, id: "winrm", auto_correct: true
  # config.vm.post_up_message =
  # config.vm.provider = VirtualBox
  # config.vm.provision =
  # config.vm.synced_folder =
  # config.vm.usable_port_range = Defaults to '2200..2250'

  # config.winrm, requires config.vm.communicaton to be set to winrm
  # config.winrm.username = Default set to 'vagrant'
  # config.winrm.password = Default set to 'vagrant'
  # config.winrm.host = Default set to 'empty' provider usually figures this out for you / URL or Hostname of WinRM service
  # config.winrm.port = Default set to '5985'
  # config.winrm.guest_port =
  # config.winrm.transport = Default set to ':negotiate' / other options include :negotiate, ssl and :plaintext
  # config.winrm.basic_auth_only = Default set to 'false'
  # config.winrm.execution_time_limit = Default set to '2' hours

  # config.vagrant
  # config.vagrant.host = Default set to ':detect' / should only be manually set if auto-detection fails

  config.vm.provider "virtualbox" do |v|
    v.name = "<%= @options[:vm_name] %>"
    v.gui = <%= @options.has_key? :gui_output -%>
    <% if @options.has_key? :max_processor_cap -%>
    v.customize ["modifyvm", :id, "--cpuexecutioncap", "<%= @options[:max_processor_cap] %>"]
    <% end -%>
    <% if @options.has_key? :max_memory_usage -%>
    v.memory = <%= @options[:max_memory_usage] %>
    <% end -%>
    <% if @options.has_key? :number_of_processors -%>
    v.cpus = <%= @options[:number_of_processors] %>
    <% end %>
  end

  # config.vm.provision
  <% @config_modules.each do | provisioner, modules | -%>
    <% case provisioner
      when :Puppet -%>
# config.vm.provision "puppet" do |puppet|
  # TODO: Make build modules dynamic and not hard coded
  # Build modules
  # puppet.manifests_path = "<%= @options[:project_dir] %>/modules/stdlib/manifests"
  # puppet.manifests_path = "<%= @options[:project_dir] %>/modules/chocolatey/manifests"

  puppet.module_path = "<%= @options[:project_dir] %>/modules"


  #####

  # Config modules

    # puppet.manifest_file = Defaults to 'default.pp'
    # puppet.manifest_file = "init.pp"
    # puppet.manifests_path = Defaults to 'manifests'

      <% modules.each do | module_root | -%>
        <% module_root.each do | module_name, module_information| %>

config.vm.provision "puppet" do | <%= module_name %>|

  puppet.manifest_file = "<%= module_information[:manifest_file] %>"

  puppet.manifests_path = "<%= @options[:project_dir] %>/modules/<%= module_name %>/manifests"

  # puppet.module_path = "<%= @options[:project_dir] %>/modules/<%= module_name %>"

  # puppet.module_path = "<%= @options[:project_dir] %>/modules"
  # environment = [Name of the puppet environment]
  # environment_path = [Path to the directory containing environment files on the host disk]
  # environment_variables = {Hash} [A hash of string key/value pairs to be set as environment variables before the puppet apply run]
  # synced_folder_type = Defaults to "#{Default synced folder type}"
  # synced_folder_args = {Array} [Arguments that are passed to the folder sync]
  # temp_dir = [The directory where all the data associated with the Puppet run (manifest files, modules, etc.) will be stored on the guest machine]
  # working_directory = [Path in the guest that will be the working directory when Puppet is executed]

  # puppet.facter = {
  #     "data_store" => "<%= @options[:data_store] %>"
  # }

      <% if @options.has_key? :verbose -%>
  puppet.options = "--verbose"
      <% end -%>
      <% if @options.has_key? :debug -%>
  puppet.options = "--debug"
      <% end -%>
  #   puppet.options = "--verbose --debug"
    <% end -%>

            end
        <% end -%>
    <% end -%>

  #####

  # Cleanup modules



  #####

  <% end -%>
end